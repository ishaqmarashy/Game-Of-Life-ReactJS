{"version":3,"sources":["App.js","index.js"],"names":["neighbors","Grid","props","generateRandomGrid","row","col","rows","y","cols","x","rand","Math","floor","random","push","generateEmptyGrid","state","cells","running","age","speed","startstop","bind","toggleCell","run","reset","e","target","getAttribute","ar","this","setState","old","i","length","slice","count","n","yindx","xindx","clearInterval","intervalID","setInterval","className","onClick","map","v","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5fc38fd.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nconst row =50;\nconst col =100;\nconst speed =100;\nconst neighbors = [[1, 1],[-1, 1],[1, -1], [-1, -1],[1, 0],[-1, 0],[0, 1],[0, -1]];\n\nclass Grid extends React.Component {\n  constructor(props) {    \n    super(props);    \n    this.state = {      \n      cells:this.generateEmptyGrid(props.row,props.col)  ,\n      running:false,\n      row:props.row,\n      col:props.col,\n      age:0,  \n      speed: props.speed || 100\n    };\n    this.startstop = this.startstop.bind(this);\n    this.toggleCell = this.toggleCell.bind(this);\n    this.run = this.run.bind(this);\n    this.rand = this.rand.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  toggleCell(e){\n    let x=e.target.getAttribute('x')\n    let y=e.target.getAttribute('y')\n    let ar=this.state.cells\n    ar[x][y]=ar[x][y]===0?1:0\n    this.setState({cells:ar})\n  }\n\n  rand(){\n    this.setState({cells: this.generateRandomGrid(this.state.row,this.state.col),age:0})\n  }\n\n  reset(){\n    this.setState({cells: this.generateEmptyGrid(this.state.row,this.state.col),age:0})\n    if(this.state.running)\n      this.startstop()\n  }\n\n  run(){\n    let ar=[]\n    let old=this.state.cells\n    for (var i = 0; i < old.length; i++)\n      ar[i] = old[i].slice();\n    for(let x=0; x<row; x++){\n      for(let y=0; y<col; y++){\n        let count=0\n       \n        for (let n=0; n<neighbors.length; n++){\n          let yindx= neighbors[n][1]+y\n          let xindx= neighbors[n][0]+x\n          if(xindx>-1&&yindx>-1&&xindx<row&&yindx<col&&old[xindx][yindx]>0 )\n            count+=1\n        }\n      \n        if(count<2||3<count)\n          ar[x][y]=0\n        //acts like a live cell but could be 1 - 3 i can use this for css colors\n        else if (count===3&&old[x][y]===0)\n          ar[x][y]=1\n        // else if (old[x][y]>0)\n        //   ar[x][y]=count\n      }\n    }\n    this.setState({cells:ar , age:this.state.age+1})\n  }\n\n  startstop(){\n    if(!this.state.running){\n      this.intervalID=setInterval(()=>this.run(),this.state.speed)\n    }\n    else{\n      clearInterval(this.intervalID)\n    }\n    this.setState({running:!this.state.running})\n  }\n\n  generateRandomGrid = (row,col) => {\n    const rows = [];\n    for (let y = 0; y < row; y++) {\n      const cols = [];\n      for (let x = 0; x < col; x++) {\n        let rand=Math.floor(Math.random()*1.2);\n        cols.push(rand);\n      }\n      rows.push(cols)\n    }\n    return rows;\n  };\n\n  generateEmptyGrid = (row,col) => {\n    const rows = [];\n    for (let y = 0; y < row; y++) {\n      const cols = [];\n      for (let x = 0; x < col; x++) {\n        cols.push(0);\n      }\n      rows.push(cols)\n    }\n    return rows;\n  };\n  \n  render (){\n    return (<>\n            <div className=\"buttons_container\" key=\"buttons_container\">\n              <button  key='btn1' className={this.state.running? 'start': 'stop'} onClick={this.startstop}>Generation: {this.state.age}</button>\n              <button  key='btn2' className={this.state.running? 'stop':'start'} onClick={this.rand}>Randomize</button>\n              <button  key='btn3' className={this.state.running? 'stop':'start'} onClick={this.reset}>Clear</button>\n              </div>\n            <div className='displayblock' key='displayblock'>\n            {\n                this.state.cells.map((rows,x)=> \n                   <div className='button_row' key={'button_row'+x}>\n                        {\n                        rows.map((v,y)=><button x={x} y={y} key={y +','+ x} className={'cell'+v} onClick={this.toggleCell} ></button>)\n                        }\n                    </div>)\n           }</div>\n            </>\n      )\n  }\n}\n\nfunction App() {\n    return   <Grid row={row} col={col} speed={speed} />    \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}